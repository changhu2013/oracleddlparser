/* Generated By:JJTree&JavaCC: Do not edit this line. PLSQLParser.java */
/*******************************************************************************
 * Copyright (c) 2011 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0 
 * which accompanies this distribution. 
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at 
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *     Mike Norman - add PLSQL package spec parsing to DBWSBuilder
 ******************************************************************************/
package org.eclipse.persistence.tools.dbws.plsqlparser;

public class PLSQLParser/*@bgen(jjtree)*/implements PLSQLParserTreeConstants, PLSQLParserConstants {/*@bgen(jjtree)*/
  protected static JJTPLSQLParserState jjtree = new JJTPLSQLParserState();
    public PLSQLParser() {
      super();
    }

    public static void main( String args[] ) throws ParseException {
        PLSQLParser p = null ;
        if (args.length < 1) {
            System.out.println("Reading from stdin") ;
            p = new PLSQLParser(System.in) ;
        }
        else {
            try {
                p = new PLSQLParser(new java.io.DataInputStream(
                                new java.io.FileInputStream(args[0]))) ;
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println("File " + args[0] +
                                " not found. Reading from stdin") ;
                p = new PLSQLParser(System.in) ;
            }
        }
        SimpleNode sn = p.parsePLSQLPackage();
        sn.dump(">");
    }

  static final public String OracleObjectName() throws ParseException {
 /*@bgen(jjtree) OracleObjectName */
  PLSQLNode jjtn000 = new PLSQLNode(JJTORACLEOBJECTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return token.image;}
        break;
      case S_QUOTED_IDENTIFIER:
        jj_consume_token(S_QUOTED_IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     String s = token.image; {if (true) return s.substring(1, s.length() - 1);}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

// stripped-down version of PLSQL grammar: only parses package specifications
  static final public SimpleNode parsePLSQLPackage() throws ParseException {
 /*@bgen(jjtree) parsePLSQLPackage */
 PLSQLNode jjtn000 = new PLSQLNode(JJTPARSEPLSQLPACKAGE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String schema = null;
 String packageName = null;
    try {
      jj_consume_token(K_CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        jj_consume_token(K_OR);
        jj_consume_token(K_REPLACE);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(K_PACKAGE);
      if (jj_2_1(2)) {
        schema = OracleObjectName();
        jj_consume_token(DOT);
      } else {
        ;
      }
      packageName = OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AUTHID:
        jj_consume_token(K_AUTHID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CURRENT_USER:
        case K_DEFINER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_CURRENT_USER:
            jj_consume_token(K_CURRENT_USER);
            break;
          case K_DEFINER:
            jj_consume_token(K_DEFINER);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case K_IS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
          jj_consume_token(K_AS);
          break;
        case K_IS:
          jj_consume_token(K_IS);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CURSOR:
        case K_FUNCTION:
        case K_PRAGMA:
        case K_PROCEDURE:
        case K_TYPE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_TYPE:
          typeDeclaration();
          break;
        case K_CURSOR:
          cursorDeclaration();
          break;
        case K_FUNCTION:
          functionDeclaration();
          break;
        case K_PROCEDURE:
          procedureDeclaration();
          break;
        case K_PRAGMA:
          pragmaDeclaration();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(K_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        OracleObjectName();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      PLSQLPackageNode packageNode = new PLSQLPackageNode();
      if (schema != null) {
        packageNode.setPackageName(schema + "." + packageName);
      }
      else {
        packageNode.setPackageName(packageName);
      }
      ((PLSQLNode)jjtn000).setPackageNode(packageNode);
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode typeDeclaration() throws ParseException {
 /*@bgen(jjtree) typeDeclaration */
 PLSQLNode jjtn000 = new PLSQLNode(JJTTYPEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(K_TYPE);
      t = jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IS);
      typeDeclarationBody();
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(t.image);
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode cursorDeclaration() throws ParseException {
 /*@bgen(jjtree) cursorDeclaration */
 PLSQLNode jjtn000 = new PLSQLNode(JJTCURSORDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(K_CURSOR);
      t = jj_consume_token(S_IDENTIFIER);
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(t.image);
      {if (true) return jjtn000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode functionDeclaration() throws ParseException {
 /*@bgen(jjtree) functionDeclaration */
 PLSQLNode jjtn000 = new PLSQLNode(JJTFUNCTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(K_FUNCTION);
      t = jj_consume_token(S_IDENTIFIER);
      functionDeclarationBody();
      jj_consume_token(K_RETURN);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROWTYPE:
      case TYPE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          jj_consume_token(TYPE);
          break;
        case ROWTYPE:
          jj_consume_token(ROWTYPE);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DETERMINISTIC:
      case K_PARALLEL_ENABLE:
      case K_PIPELINED:
      case K_RESULT_CACHE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DETERMINISTIC:
          jj_consume_token(K_DETERMINISTIC);
          break;
        case K_PIPELINED:
          jj_consume_token(K_PIPELINED);
          break;
        case K_PARALLEL_ENABLE:
          jj_consume_token(K_PARALLEL_ENABLE);
          break;
        case K_RESULT_CACHE:
          jj_consume_token(K_RESULT_CACHE);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(t.image);
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode procedureDeclaration() throws ParseException {
 /*@bgen(jjtree) procedureDeclaration */
 PLSQLNode jjtn000 = new PLSQLNode(JJTPROCEDUREDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(K_PROCEDURE);
      t = jj_consume_token(S_IDENTIFIER);
      procedureDeclarationBody();
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue(t.image);
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void pragmaDeclaration() throws ParseException {
 /*@bgen(jjtree) pragmaDeclaration */
  PLSQLNode jjtn000 = new PLSQLNode(JJTPRAGMADECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_PRAGMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AUTONOMOUS_TRANSACTION:
      case K_EXCEPTION_INIT:
      case K_INLINE:
      case K_RESTRICT_REFERENCES:
      case K_SERIALLY_REUSABLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AUTONOMOUS_TRANSACTION:
          jj_consume_token(K_AUTONOMOUS_TRANSACTION);
          break;
        case K_EXCEPTION_INIT:
          jj_consume_token(K_EXCEPTION_INIT);
          jj_consume_token(OPENPAREN);
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(74);
          jj_consume_token(S_NUMBER);
          jj_consume_token(CLOSEPAREN);
          break;
        case K_SERIALLY_REUSABLE:
          jj_consume_token(K_SERIALLY_REUSABLE);
          break;
        case K_INLINE:
          jj_consume_token(K_INLINE);
          jj_consume_token(OPENPAREN);
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(74);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NO:
          case K_YES:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_YES:
              jj_consume_token(K_YES);
              break;
            case K_NO:
              jj_consume_token(K_NO);
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          jj_consume_token(CLOSEPAREN);
          break;
        case K_RESTRICT_REFERENCES:
          jj_consume_token(K_RESTRICT_REFERENCES);
          jj_consume_token(OPENPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_DEFAULT:
          case S_IDENTIFIER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S_IDENTIFIER:
              jj_consume_token(S_IDENTIFIER);
              break;
            case K_DEFAULT:
              jj_consume_token(K_DEFAULT);
              break;
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          label_2:
          while (true) {
            jj_consume_token(74);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_RNDS:
            case K_RNPS:
            case K_TRUST:
            case K_WNDS:
            case K_WNPS:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case K_RNDS:
                jj_consume_token(K_RNDS);
                break;
              case K_WNDS:
                jj_consume_token(K_WNDS);
                break;
              case K_RNPS:
                jj_consume_token(K_RNPS);
                break;
              case K_WNPS:
                jj_consume_token(K_WNPS);
                break;
              case K_TRUST:
                jj_consume_token(K_TRUST);
                break;
              default:
                jj_la1[18] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[19] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 74:
              ;
              break;
            default:
              jj_la1[20] = jj_gen;
              break label_2;
            }
          }
          jj_consume_token(CLOSEPAREN);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void typeDeclarationBody() throws ParseException {
 /*@bgen(jjtree) typeDeclarationBody */
  PLSQLNode jjtn000 = new PLSQLNode(JJTTYPEDECLARATIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(75);
      jj_consume_token(SEMICOLON);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void functionDeclarationBody() throws ParseException {
 /*@bgen(jjtree) functionDeclarationBody */
  PLSQLNode jjtn000 = new PLSQLNode(JJTFUNCTIONDECLARATIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(76);
      jj_consume_token(SEMICOLON);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void procedureDeclarationBody() throws ParseException {
 /*@bgen(jjtree) procedureDeclarationBody */
  PLSQLNode jjtn000 = new PLSQLNode(JJTPROCEDUREDECLARATIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(77);
      jj_consume_token(SEMICOLON);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PLSQLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x400000,0x9000,0x9000,0x200,0x200100,0x200100,0x18082000,0x18082000,0x0,0x0,0x0,0x86010000,0x86010000,0x800000,0x800000,0x4000,0x4000,0x0,0x0,0x0,0x40140400,0x40140400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x88000000,0x88000000,0x0,0x0,0x100,0x100,0x0,0x0,0xd6,0xd6,0x0,0x8,0x8,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x210,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x210,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x400,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PLSQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PLSQLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PLSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PLSQLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PLSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PLSQLParser(PLSQLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PLSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[78];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 78; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
