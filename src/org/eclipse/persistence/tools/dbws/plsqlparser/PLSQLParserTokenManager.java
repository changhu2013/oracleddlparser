/* Generated By:JJTree&JavaCC: Do not edit this line. PLSQLParserTokenManager.java */
/*******************************************************************************
 * Copyright (c) 2011 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0 
 * which accompanies this distribution. 
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at 
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *     Mike Norman - add PLSQL package spec parsing to DBWSBuilder
 ******************************************************************************/
package org.eclipse.persistence.tools.dbws.plsqlparser;

/** Token Manager. */
public class PLSQLParserTokenManager implements PLSQLParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000000000L) != 0L)
            return 0;
         if ((active0 & 0x400000000000L) != 0L)
            return 71;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 6;
         if ((active0 & 0x220000000000L) != 0L)
            return 21;
         if ((active0 & 0x10000800000L) != 0L)
            return 72;
         if ((active0 & 0xffff7fff00L) != 0L)
         {
            jjmatchedKind = 68;
            return 73;
         }
         return -1;
      case 1:
         if ((active0 & 0xffff1ffe00L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
            return 73;
         }
         if ((active0 & 0x10000800000L) != 0L)
            return 72;
         if ((active0 & 0x600100L) != 0L)
            return 73;
         return -1;
      case 2:
         if ((active0 & 0xffff1dfe00L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
            return 73;
         }
         if ((active0 & 0x10000800000L) != 0L)
            return 72;
         if ((active0 & 0x20000L) != 0L)
            return 73;
         return -1;
      case 3:
         if ((active0 & 0x800000L) != 0L)
            return 45;
         if ((active0 & 0x10000000000L) != 0L)
            return 72;
         if ((active0 & 0xe600000000L) != 0L)
            return 73;
         if ((active0 & 0x19ff1dfe00L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
            return 73;
         }
         return -1;
      case 4:
         if ((active0 & 0x10000000000L) != 0L)
            return 45;
         if ((active0 & 0x9ff1dfe00L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
            return 73;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 73;
         return -1;
      case 5:
         if ((active0 & 0x8f70dd400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
            return 73;
         }
         if ((active0 & 0x108102a00L) != 0L)
            return 73;
         return -1;
      case 6:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
            return 14;
         }
         if ((active0 & 0x2100c000L) != 0L)
            return 73;
         if ((active0 & 0x8560d1400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
            return 73;
         }
         return -1;
      case 7:
         if ((active0 & 0x80001000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
            return 14;
         }
         if ((active0 & 0x856050400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
            return 73;
         }
         if ((active0 & 0x80000L) != 0L)
            return 73;
         return -1;
      case 8:
         if ((active0 & 0x50400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
            return 73;
         }
         if ((active0 & 0x8c2001000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
            return 14;
         }
         if ((active0 & 0x14000000L) != 0L)
            return 73;
         return -1;
      case 9:
         if ((active0 & 0x10400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 9;
            return 73;
         }
         if ((active0 & 0x8c2041000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 9;
            return 14;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 10;
            return 73;
         }
         if ((active0 & 0x8c2041400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 10;
            return 14;
         }
         return -1;
      case 11:
         if ((active0 & 0x80001000L) != 0L)
            return 14;
         if ((active0 & 0x842040400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 11;
            return 14;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 11;
            return 73;
         }
         return -1;
      case 12:
         if ((active0 & 0x842040400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 12;
            return 14;
         }
         if ((active0 & 0x10000L) != 0L)
            return 73;
         return -1;
      case 13:
         if ((active0 & 0x40000L) != 0L)
            return 14;
         if ((active0 & 0x842000400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 13;
            return 14;
         }
         return -1;
      case 14:
         if ((active0 & 0x840000400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 14;
            return 14;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 14;
         return -1;
      case 15:
         if ((active0 & 0x840000400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 15;
            return 14;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000000L) != 0L)
            return 14;
         if ((active0 & 0x40000400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 16;
            return 14;
         }
         return -1;
      case 17:
         if ((active0 & 0x40000400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 17;
            return 14;
         }
         return -1;
      case 18:
         if ((active0 & 0x40000000L) != 0L)
            return 14;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 18;
            return 14;
         }
         return -1;
      case 19:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 19;
            return 14;
         }
         return -1;
      case 20:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 20;
            return 14;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x8800000000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x10000800000L);
      case 40:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 41:
         return jjStopAtPos(0, 43);
      case 42:
         return jjStopAtPos(0, 42);
      case 43:
         return jjStopAtPos(0, 57);
      case 44:
         return jjStopAtPos(0, 74);
      case 45:
         return jjStartNfaWithStates_0(0, 53, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 46, 71);
      case 47:
         return jjStartNfaWithStates_0(0, 61, 6);
      case 58:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 59:
         return jjStopAtPos(0, 60);
      case 60:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x50000000000000L);
      case 61:
         return jjStopAtPos(0, 47);
      case 62:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 63:
         return jjStopAtPos(0, 58);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x700L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3800L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x60000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1f000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x7e0000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 126:
         return jjStopAtPos(0, 62);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 61:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x9e001c000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc600920000L);
      case 82:
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 73);
         return jjMoveStringLiteralDfa2_0(active0, 0x800001018000800L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 73);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 73);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x83600L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000000L);
      case 124:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000L);
      case 68:
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x4200000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000010800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xa424000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x802003000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010600L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 45);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2004800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10080000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x4050000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800108000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 83:
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 73);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 73);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 73);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x11000002000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 45);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x821000000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(4, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x10001000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x86000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x108400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x140010000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000080800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 73);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 73);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x44080000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x802004000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 73);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80040000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 73);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x50000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 73);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(7, 59);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 73);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x842000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      case 68:
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 73);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x840000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x11400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x840001000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 14);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 12, 14);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 67:
      case 99:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 73);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 18, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(14, 25, 14);
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(16, 35, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(18, 30, 14);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(21, 10, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
               case 14:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(14);
                  break;
               case 72:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 39)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjstateSet[jjnewStateCnt++] = 45;
                  }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddStates(7, 13);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(51, 61);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(48, 49);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 58)
                     jjAddStates(14, 16);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(61);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(17, 19);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddStates(20, 22);
                  break;
               case 9:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if (curChar == 58)
                     jjAddStates(14, 16);
                  break;
               case 17:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjAddStates(23, 24);
                  break;
               case 18:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(30, 32);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(38, 27);
                  break;
               case 39:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(41, 27);
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar != 39)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 46:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 47:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 34 && kind > 73)
                     kind = 73;
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(51, 61);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(35, 37);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(7, 13);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(63, 52);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(38, 40);
                  break;
               case 65:
                  if (curChar == 46)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(66, 52);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  break;
               case 72:
               case 43:
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 21:
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(41, 43);
                  break;
               case 5:
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 1:
                  jjAddStates(17, 19);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 14:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 46);
                  break;
               case 46:
                  jjCheckNAddTwoStates(46, 44);
                  break;
               case 48:
                  jjAddStates(47, 48);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(17, 19);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 24, 26, 36, 37, 27, 63, 64, 65, 52, 67, 68, 70, 16, 21, 
   39, 1, 2, 4, 8, 9, 11, 17, 18, 29, 31, 32, 33, 34, 36, 37, 
   27, 54, 56, 57, 58, 59, 64, 65, 52, 16, 17, 18, 28, 29, 31, 48, 
   49, 53, 54, 56, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\72\75", "\52", "\51", "\174\174", "\72", "\56", "\75", "\76", "\76\75", "\50\53\51", 
"\74", "\74\75", "\55", "\74\76", "\41\75", "\50", "\53", "\77", null, "\73", "\57", 
"\176", null, null, null, null, null, null, null, null, null, null, null, "\54", null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x3f91L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[71];
static private final int[] jjstateSet = new int[142];
static protected char curChar;
/** Constructor. */
public PLSQLParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PLSQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 71; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 75)
   {
      jjmatchedKind = 75;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
