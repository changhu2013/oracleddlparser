/* Generated By:JJTree&JavaCC: Do not edit this line. DDLParserTokenManager.java */
/*******************************************************************************
 * Copyright (c) 2011 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
 * which accompanies this distribution.
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *     Mike Norman - June 10 2011, created DDL parser package
 ******************************************************************************/
package org.eclipse.persistence.tools.dbws.metadata.parser;
//javase imports
import java.io.InputStream;
import java.util.Stack;
//metadata imports
import org.eclipse.persistence.tools.dbws.metadata.BlobType;
import org.eclipse.persistence.tools.dbws.metadata.ClobType;
import org.eclipse.persistence.tools.dbws.metadata.ComplexDatabaseType;
import org.eclipse.persistence.tools.dbws.metadata.DatabaseType;
import org.eclipse.persistence.tools.dbws.metadata.DatabaseTypesRepository;
import org.eclipse.persistence.tools.dbws.metadata.DecimalType;
import org.eclipse.persistence.tools.dbws.metadata.DoubleType;
import org.eclipse.persistence.tools.dbws.metadata.FieldType;
import org.eclipse.persistence.tools.dbws.metadata.FloatType;
import org.eclipse.persistence.tools.dbws.metadata.NumericType;
import org.eclipse.persistence.tools.dbws.metadata.PLSQLPackageType;
import org.eclipse.persistence.tools.dbws.metadata.RealType;
import org.eclipse.persistence.tools.dbws.metadata.TableType;
import org.eclipse.persistence.tools.dbws.metadata.URowIdType;
import org.eclipse.persistence.tools.dbws.metadata.UnresolvedSizedType;
import org.eclipse.persistence.tools.dbws.metadata.UnresolvedType;
import org.eclipse.persistence.tools.dbws.metadata.VarChar2Type;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.BINARY_INTEGER_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.BINARY_FLOAT_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.BINARY_DOUBLE_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.BOOLEAN_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.DATE_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.INTEGER_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.MLSLABEL_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.NATURAL_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.PLS_INTEGER_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.POSITIVE_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.ROWID_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.SMALLINT_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.TIME_TYPE;
import static org.eclipse.persistence.tools.dbws.metadata.ScalarType.TIMESTAMP_TYPE;

/** Token Manager. */
@SuppressWarnings("all")
public class DDLParserTokenManager implements DDLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x100000000L) != 0L)
            return 0;
         if ((active3 & 0xc00000L) != 0L)
            return 71;
         if ((active3 & 0x10000000000L) != 0L)
            return 6;
         if ((active3 & 0x108000L) != 0L)
            return 21;
         if ((active1 & 0x400000000000L) != 0L || (active3 & 0x2000L) != 0L)
            return 72;
         if ((active0 & 0xff00L) != 0L)
            return 73;
         if ((active0 & 0xffffffffbfff0000L) != 0L || (active1 & 0xffffbfffffffffffL) != 0L || (active2 & 0xeffffffbffffffffL) != 0L || (active3 & 0x5fffL) != 0L)
         {
            jjmatchedKind = 238;
            return 73;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffffffb3ffee00L) != 0L || (active1 & 0xd1ffbfffffe003ffL) != 0L || (active2 & 0xef7ffffbffffffffL) != 0L || (active3 & 0x5fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 1;
            }
            return 73;
         }
         if ((active1 & 0x400000000000L) != 0L || (active3 & 0x2000L) != 0L)
            return 72;
         if ((active0 & 0xc001000L) != 0L || (active1 & 0x2e000000001ffc00L) != 0L || (active2 & 0x80000000000000L) != 0L)
            return 73;
         return -1;
      case 2:
         if ((active0 & 0xf7fc5fffbbffec00L) != 0L || (active1 & 0x19fdbb7fff60fbffL) != 0L || (active2 & 0xef6ff9fbfff3bfffL) != 0L || (active3 & 0x5fffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 2;
            }
            return 73;
         }
         if ((active1 & 0x400000000000L) != 0L || (active3 & 0x2000L) != 0L)
            return 72;
         if ((active0 & 0x803a00000000200L) != 0L || (active1 & 0xc0020480008f0000L) != 0L || (active2 & 0x100600000c4000L) != 0L)
            return 73;
         return -1;
      case 3:
         if ((active1 & 0x200000000000L) != 0L || (active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 3;
            }
            return 14;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 45;
         if ((active3 & 0x2000L) != 0L)
            return 72;
         if ((active0 & 0x1100ba600000L) != 0L || (active1 & 0x180c000387400021L) != 0L || (active2 & 0xa60440230018000L) != 0L || (active3 & 0x5e80L) != 0L)
            return 73;
         if ((active0 & 0xf7ff4eff019fec00L) != 0L || (active1 & 0x81f19b7c782efbdeL) != 0L || (active2 & 0xe50fb9f9cffa3fefL) != 0L || (active3 & 0x17fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 3;
            }
            return 73;
         }
         return -1;
      case 4:
         if ((active1 & 0x18000000L) != 0L)
            return 14;
         if ((active3 & 0x2000L) != 0L)
            return 45;
         if ((active0 & 0xf4ff4e5e219ce000L) != 0L || (active1 & 0x1f1831c002e6bc4L) != 0L || (active2 & 0xa14bb9f0c7fa0fefL) != 0L || (active3 & 0x7bL) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 4;
            return 73;
         }
         if ((active1 & 0x200000000000L) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 4;
            return 14;
         }
         if ((active0 & 0x30000a100030c00L) != 0L || (active1 & 0x800818606000901aL) != 0L || (active2 & 0x4404000908003000L) != 0L || (active3 & 0x104L) != 0L)
            return 73;
         return -1;
      case 5:
         if ((active1 & 0x200000000000L) != 0L || (active2 & 0x2000000000000010L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 5;
            }
            return 14;
         }
         if ((active0 & 0xd06f461a219cc000L) != 0L || (active1 & 0xe08314002e2944L) != 0L || (active2 & 0x814b29c044f80fafL) != 0L || (active3 & 0x58L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 5;
            }
            return 73;
         }
         if ((active0 & 0x2490084400002000L) != 0L || (active1 & 0x111000800004280L) != 0L || (active2 & 0x903083020040L) != 0L || (active3 & 0x23L) != 0L)
            return 73;
         return -1;
      case 6:
         if ((active0 & 0x10000000001c0000L) != 0L || (active1 & 0x200000000000L) != 0L || (active2 & 0x2000000000900010L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 6;
            }
            return 14;
         }
         if ((active0 & 0xd000201800000L) != 0L || (active1 & 0x20820000220000L) != 0L || (active2 & 0x8002002004200501L) != 0L || (active3 & 0x58L) != 0L)
            return 73;
         if ((active0 & 0xc06246182000c000L) != 0L || (active1 & 0xc00114000c2944L) != 0L || (active2 & 0x14929c042480aaeL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 6;
            }
            return 73;
         }
         return -1;
      case 7:
         if ((active3 & 0x8L) != 0L)
            return 14;
         if ((active0 & 0xc06240102000c000L) != 0L || (active1 & 0x40800L) != 0L || (active2 & 0x14901c00248088eL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 7;
            }
            return 73;
         }
         if ((active0 & 0x10000600001c0000L) != 0L || (active1 & 0x200000000000L) != 0L || (active2 & 0x2000000000900010L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 7;
            }
            return 14;
         }
         if ((active0 & 0x800000000L) != 0L || (active1 & 0xc0011400082144L) != 0L || (active2 & 0x280040000220L) != 0L)
            return 73;
         return -1;
      case 8:
         if ((active0 & 0x20401000008000L) != 0L || (active2 & 0x101014000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 8;
            }
            return 73;
         }
         if ((active1 & 0x40200000000000L) != 0L)
            return 14;
         if ((active0 & 0xc042000020004000L) != 0L || (active1 & 0x40800L) != 0L || (active2 & 0x4800000208088cL) != 0L)
            return 73;
         if ((active0 & 0x10000600001c0000L) != 0L || (active2 & 0x2000008000d00012L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 8;
            }
            return 14;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000000L) != 0L || (active2 & 0x2000000000000000L) != 0L)
            return 14;
         if ((active0 & 0x90000400001c0000L) != 0L || (active2 & 0x8000d00012L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 9;
            return 14;
         }
         if ((active0 & 0x401000000000L) != 0L || (active2 & 0x4000000000L) != 0L)
            return 73;
         if ((active0 & 0x20000000008000L) != 0L || (active2 & 0x101010000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 9;
            return 73;
         }
         return -1;
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L || (active2 & 0x100010L) != 0L)
            return 14;
         if ((active0 & 0x80000400001c8000L) != 0L || (active2 & 0x8000c00002L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 10;
            return 14;
         }
         if ((active2 & 0x100000000000000L) != 0L)
            return 73;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x1010000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 10;
            return 73;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000080000L) != 0L || (active2 & 0x800000L) != 0L)
            return 14;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x1010000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 11;
            return 73;
         }
         if ((active0 & 0x8000000000148000L) != 0L || (active2 & 0x8000400002L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 11;
            return 14;
         }
         return -1;
      case 12:
         if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 12;
            return 73;
         }
         if ((active0 & 0x40000L) != 0L)
            return 14;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x1000000000000L) != 0L)
            return 73;
         if ((active0 & 0x8000000000108000L) != 0L || (active2 & 0x8000400002L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 12;
            return 14;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000000000100000L) != 0L)
            return 14;
         if ((active0 & 0x8000L) != 0L || (active2 & 0x8000400002L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 13;
            return 14;
         }
         if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 13;
            return 73;
         }
         return -1;
      case 14:
         if ((active2 & 0x2L) != 0L)
            return 14;
         if ((active0 & 0x8000L) != 0L || (active2 & 0x8000400000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 14;
            return 14;
         }
         if ((active2 & 0x10000000000L) != 0L)
            return 73;
         return -1;
      case 15:
         if ((active0 & 0x8000L) != 0L || (active2 & 0x8000400000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 15;
            return 14;
         }
         return -1;
      case 16:
         if ((active2 & 0x8000000000L) != 0L)
            return 14;
         if ((active0 & 0x8000L) != 0L || (active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 16;
            return 14;
         }
         return -1;
      case 17:
         if ((active0 & 0x8000L) != 0L || (active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 17;
            return 14;
         }
         return -1;
      case 18:
         if ((active2 & 0x400000L) != 0L)
            return 14;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 18;
            return 14;
         }
         return -1;
      case 19:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 19;
            return 14;
         }
         return -1;
      case 20:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 20;
            return 14;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000L);
      case 35:
         return jjStopAtPos(0, 229);
      case 36:
         return jjStopAtPos(0, 216);
      case 37:
         jjmatchedKind = 217;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x1000000400000000L, 0x0L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L, 0x2000L);
      case 40:
         jjmatchedKind = 227;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000L);
      case 41:
         return jjStopAtPos(0, 210);
      case 42:
         return jjStopAtPos(0, 208);
      case 43:
         return jjStopAtPos(0, 228);
      case 44:
         return jjStopAtPos(0, 213);
      case 45:
         return jjStartNfaWithStates_0(0, 224, 0);
      case 46:
         jjmatchedKind = 214;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000L);
      case 47:
         return jjStartNfaWithStates_0(0, 232, 6);
      case 58:
         jjmatchedKind = 212;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8000L);
      case 59:
         return jjStopAtPos(0, 231);
      case 60:
         jjmatchedKind = 222;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x280000000L);
      case 61:
         return jjStopAtPos(0, 218);
      case 62:
         jjmatchedKind = 219;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10000000L);
      case 63:
         return jjStopAtPos(0, 230);
      case 64:
         return jjStopAtPos(0, 209);
      case 65:
      case 97:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0xfe00L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xfff0000L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfffb0000000L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfff00000000000L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xff00000000000000L, 0x1L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7eL, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ffe00L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fe000000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffbf8000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff00000000000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfffL, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xbfffff000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fff000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffc000000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe000000000000000L, 0x7L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x78L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf80L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000L);
      case 126:
         return jjStopAtPos(0, 233);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000L);
      case 46:
         if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(1, 215);
         break;
      case 61:
         if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(1, 207);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 220);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 223);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 226);
         break;
      case 62:
         if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 225);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L, active1, 0x78202000002L, active2, 0x4000000007007L, active3, 0x78L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x180000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3f800000010000L, active1, 0x200c05800000L, active2, 0x807f007ff8000L, active3, 0x1000L);
      case 70:
      case 102:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 73);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L, active2, 0x10000000000000L, active3, 0x100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000001c0000L, active1, 0x3800000cL, active2, 0x60180008000008L, active3, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000180200400L, active1, 0x1000000090L, active2, 0x10L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x8004000000ff800L, active2, 0x6000000030000000L, active3, 0x600L);
      case 79:
      case 111:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 183, 73);
         return jjMoveStringLiteralDfa2_0(active0, 0x80003e00c00000L, active1, 0x38061c0400000L, active2, 0x4003c0000020L, active3, 0x4800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x8000000000000000L, active3, 0x1L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 125, 73);
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000800L, active1, 0x100L, active2, 0x700000400000fc0L, active3, 0x2L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 73);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 84, 73);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L, active2, 0x1000800000000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000300e000L, active1, 0xc03c000000000060L, active2, 0x3000800000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000000000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0x1L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0x800000000000000L, active3, 0x2000L);
      case 124:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(1, 211);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 221);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000030000000L, active1, 0xc0000400000000L, active2, 0x100200000018040L, active3, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L, active2, 0x7080000000000L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xe003000000000000L, active1, 0x1800040000800L, active2, 0x3000020001L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 73);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x2000001000L, active2, 0xa000000010000000L, active3, 0x200L);
      case 69:
      case 101:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 180, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x1000000001200000L, active2, 0x380L, active3, 0x2000L);
      case 70:
      case 102:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000L, active1, 0x4002000L, active2, 0x80000L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L, active2, 0x8100000L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000L, active1, 0x200400001L, active2, 0x1400L, active3, 0x104L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000202000000L, active1, 0x80c100000004022L, active2, 0x8c0000000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000400000000L, active1, 0x30000800000000L, active2, 0x68400000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x18001c0000L, active1, 0x4080008240L, active2, 0x100000002000L, active3, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8180a00000L, active1, 0x400100000190L, active2, 0x400000800L, active3, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x4L, active2, 0x800000020200008L, active3, 0x400L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000000800L, active1, 0x8L, active2, 0x808000000006L, active3, 0x878L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x1002000000L, active2, 0x10000c00030L, active3, 0x1L);
      case 84:
      case 116:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 73);
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2050000800e400L, active1, 0x80000300000e0000L, active2, 0x4000040003000000L, active3, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1080002000000000L, active1, 0L, active2, 0x600000000000000L, active3, 0L);
      case 86:
      case 118:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 87:
      case 119:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 142, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0x300000000L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 73);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 39:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 45);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0x10L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x30040040401c0800L, active1, 0x80040000010L, active2, 0x8000000000000002L, active3, 0L);
      case 66:
      case 98:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 73);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x480000000000000L, active1, 0x10000800000080L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0x880L, active3, 0x18L);
      case 68:
      case 100:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 73);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 73);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 73);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 174, 73);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 185, 73);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 73);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 206, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0xc070000000000400L, active1, 0x81200020380e9000L, active2, 0x2040000804180008L, active3, 0x1L);
      case 71:
      case 103:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000002040L, active3, 0L);
      case 72:
      case 104:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 199, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x109400000010000L, active1, 0x10000006000L, active2, 0x4000808100000020L, active3, 0L);
      case 75:
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 73);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 203, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 73);
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x201820000L, active1, 0x8001000000000L, active2, 0x42800c0200000L, active3, 0x100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0x1000000000400L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 73);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 73);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L, active2, 0x100000000000000L, active3, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000L, active1, 0x1100000000200L, active2, 0x3000020000L, active3, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 73);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1008000000000000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 204, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x2060020000000L, active1, 0xc0000000200800L, active2, 0L, active3, 0x20L);
      case 83:
      case 115:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 156, 73);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 157, 73);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 161, 73);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 170, 73);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 201, 73);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 202, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x89900000000L, active1, 0x40000000eL, active2, 0x400010000001300L, active3, 0x2000L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 73);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 73);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x4000000000L, active2, 0x2000000400004L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000100L, active2, 0x4003800000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0x2L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 73);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 39:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 205, 45);
         break;
      case 50:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 14);
         break;
      case 52:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 14);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x1000200080L, active2, 0x8000200401L, active3, 0x20L);
      case 66:
      case 98:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 67:
      case 99:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1c0800000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 73);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 73);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 73);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 73);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 73);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 178, 73);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 188);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 200, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x2060200800000L, active1, 0x10000800000800L, active2, 0x4000000b00L, active3, 0L);
      case 70:
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 194, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x18L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400002000L, active1, 0L, active2, 0x90000000094L, active3, 0x42L);
      case 76:
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 73);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 73);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 190, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x1480000000000000L, active1, 0L, active2, 0x30000080000aL, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000004000L, active1, 0L, active2, 0x40L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x48000000008000L, active1, 0x200000006000L, active2, 0x803000000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x10000000000L, active2, 0x8000000000000L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0xe000000000000000L, active1, 0x1000000000100L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 73);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 73);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 73);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000401c0000L, active1, 0x200200000c0200L, active2, 0x20000000074a0000L, active3, 0x1L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 73);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 73);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x140000000000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 73);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 73);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 73);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 155, 73);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 186, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x10005801000000L, active1, 0x40L, active2, 0x8000000400000020L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x400000000L, active2, 0x1000080000000L, active3, 0L);
      case 88:
      case 120:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 73);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 65:
      case 97:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 134, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000800804000L, active1, 0x220000000000L, active2, 0x100000040000000L, active3, 0x18L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x220000000L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 73);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 73);
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 193, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000800L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 73);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 73);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 73);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 73);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 73);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 73);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 73);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x8400000000000L, active1, 0x20000L, active2, 0x8000000000080000L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc0000000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x20000000002140L, active2, 0x200000400028L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x800000000004L, active2, 0x1008000000002L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000000000L, active1, 0x800L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000L, active1, 0x10000000000L, active2, 0x84002000110L, active3, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L, active2, 0x10000000000L, active3, 0L);
      case 80:
      case 112:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 159, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000100000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 73);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 73);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x400000000L, active2, 0x8000000000600L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000040000000L, active1, 0L, active2, 0x4000080L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 73);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 73);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 192, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000000000L, active1, 0x200000L, active2, 0x40000000800004L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 73);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 197, 73);
         return jjMoveStringLiteralDfa6_0(active0, 0x1c0000L, active1, 0L, active2, 0x400000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000001c0000L, active1, 0L, active2, 0x900000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0xc00100000c0004L, active2, 0x48000000000000L, active3, 0L);
      case 67:
      case 99:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100000040400000L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 191, 73);
         break;
      case 69:
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 73);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 73);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 128, 73);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 149, 73);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 154, 73);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000040000000L, active1, 0x1400000800L, active2, 0x2L, active3, 0L);
      case 71:
      case 103:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 198, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xc060000000000000L, active1, 0L, active2, 0x2000084L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 73);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 73);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x100L, active2, 0x210000080008L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L, active2, 0x1000000000000L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000400000000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 73);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 73);
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      case 83:
      case 115:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 165, 73);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 73);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 73);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 73);
         return jjMoveStringLiteralDfa7_0(active0, 0x60020004000L, active1, 0x2000L, active2, 0x4000000010L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x220L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 138, 73);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 14);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0x880000L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 73);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 133, 73);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 137, 73);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 162);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0x200000000000L, active2, 0x18L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 73);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 73);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000104000L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 75:
      case 107:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 158, 73);
         break;
      case 76:
      case 108:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 73);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 73);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 104, 73);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100002L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 73);
         return jjMoveStringLiteralDfa8_0(active0, 0x22000000000000L, active1, 0x800L, active2, 0x2000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0xc040400000008000L, active1, 0L, active2, 0x1000000000084L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L, active2, 0x8000000000800L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 73);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 171, 73);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 30);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 73);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 173, 73);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100010000400000L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 14);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000400002L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x4000800000L);
      case 67:
      case 99:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 73);
         break;
      case 68:
      case 100:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 131, 73);
         break;
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 73);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 73);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 147, 73);
         break;
      case 71:
      case 103:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 153, 73);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L, active2, 0x100010000100000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 73);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 73);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 135, 73);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000401000100000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000040000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 182, 73);
         break;
      case 82:
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 73);
         break;
      case 83:
      case 115:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 14);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 73);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 73);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000008000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 179, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x800000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 46, 73);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x12L);
      case 70:
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 14);
         break;
      case 72:
      case 104:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 189, 14);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x1000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x100000L);
      case 76:
      case 108:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 166, 73);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L, active2, 0x100000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x8000400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x20040000008000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 73);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000100000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 148, 14);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000100000L, active2, 0x18000400000L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 60, 14);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 184, 73);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x2L);
      case 82:
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 132, 14);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x1000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x2L);
      case 69:
      case 101:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 151, 14);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x1000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 42, 14);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 19, 14);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x8000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x2L);
      case 67:
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 53, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 18, 14);
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active2, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x10000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x8000000000L);
      case 84:
      case 116:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 176, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L, active2, 0x8000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x2L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x10000000000L);
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 14);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x400000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 63, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, active2, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x8000000000L);
      case 69:
      case 101:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 129, 14);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 168, 73);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, active2, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x8000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, active2, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x400000L);
      case 69:
      case 101:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 167, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, active2, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, active2, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(18, 150, 14);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(21, 15, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
               case 14:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(14);
                  break;
               case 72:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 39)
                  {
                     if (kind > 242)
                        kind = 242;
                     jjstateSet[jjnewStateCnt++] = 45;
                  }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 241)
                        kind = 241;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 234)
                        kind = 234;
                     jjCheckNAddStates(7, 13);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(51, 61);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(48, 49);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 58)
                     jjAddStates(14, 16);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 234)
                        kind = 234;
                     jjCheckNAdd(61);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 234)
                        kind = 234;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(17, 19);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddStates(20, 22);
                  break;
               case 9:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if (curChar == 58)
                     jjAddStates(14, 16);
                  break;
               case 17:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjAddStates(23, 24);
                  break;
               case 18:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddStates(30, 32);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(38, 27);
                  break;
               case 39:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(41, 27);
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar != 39)
                     break;
                  if (kind > 242)
                     kind = 242;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 46:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 47:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 34 && kind > 243)
                     kind = 243;
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(51, 61);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddStates(35, 37);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddStates(7, 13);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(63, 52);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddStates(38, 40);
                  break;
               case 65:
                  if (curChar == 46)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(66, 52);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  break;
               case 72:
               case 43:
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 21:
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddStates(41, 43);
                  break;
               case 5:
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 1:
                  jjAddStates(17, 19);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 14:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(20);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 46);
                  break;
               case 46:
                  jjCheckNAddTwoStates(46, 44);
                  break;
               case 48:
                  jjAddStates(47, 48);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(17, 19);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 24, 26, 36, 37, 27, 63, 64, 65, 52, 67, 68, 70, 16, 21, 
   39, 1, 2, 4, 8, 9, 11, 17, 18, 29, 31, 32, 33, 34, 36, 37, 
   27, 54, 56, 57, 58, 59, 64, 65, 52, 16, 17, 18, 28, 29, 31, 48, 
   49, 53, 54, 56, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\72\75", 
"\52", "\100", "\51", "\174\174", "\72", "\54", "\56", "\56\56", "\44", "\45", "\75", 
"\76", "\76\75", "\50\53\51", "\74", "\74\75", "\55", "\74\76", "\41\75", "\50", 
"\53", "\43", "\77", "\73", "\57", "\176", null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xe47ffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[71];
private final int[] jjstateSet = new int[142];
protected char curChar;
/** Constructor. */
public DDLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DDLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 71; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
